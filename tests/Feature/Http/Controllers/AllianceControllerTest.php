<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\AllianceController
 */
class AllianceControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function add_coach_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliance = \App\Models\Alliance::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->post(route('alliance.add.coach', [$alliance]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function add_player_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliance = \App\Models\Alliance::factory()->create();
        $player = \App\Models\Player::factory()->create();

        $response = $this->post(route('alliance.add.player', [$alliance]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('alliance.create'));

        $response->assertOk();
        $response->assertViewIs('admin.alliances.add_alliance');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliance = \App\Models\Alliance::factory()->create();

        $response = $this->delete(route('alliance.destroy', [$alliance]));

        $response->assertOk();
        $this->assertDeleted($alliance);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliance = \App\Models\Alliance::factory()->create();

        $response = $this->get(route('alliance.edit', [$alliance]));

        $response->assertOk();
        $response->assertViewIs('admin.alliances.edit_alliance');
        $response->assertViewHas('alliance', $alliance);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliances = \App\Models\Alliance::factory()->times(3)->create();

        $response = $this->get(route('alliance.index'));

        $response->assertOk();
        $response->assertViewIs('admin.alliances.view_alliances');
        $response->assertViewHas('teams');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function remove_coach_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $alliance = \App\Models\Alliance::factory()->create();

        $response = $this->get(route('remove.coach', ['coach_id' => $alliance->coach_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function remove_player_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $player = \App\Models\Player::factory()->create();
        $alliance = \App\Models\Alliance::factory()->create();

        $response = $this->get(route('remove.player', ['player_id' => $alliance->player_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliance = \App\Models\Alliance::factory()->create();
        $statistic = \App\Models\Statistic::factory()->create();
        $users = \App\Models\User::factory()->times(3)->create();
        $players = \App\Models\Player::factory()->times(3)->create();

        $response = $this->get(route('alliance.show', [$alliance]));

        $response->assertOk();
        $response->assertViewIs('admin.alliances.show_alliance');
        $response->assertViewHas('alliance', $alliance);
        $response->assertViewHas('coaches');
        $response->assertViewHas('players', $players);
        $response->assertViewHas('teamCoaches');
        $response->assertViewHas('teamPlayers');
        $response->assertViewHas('mostGoalsScored');
        $response->assertViewHas('mostAssists');
        $response->assertViewHas('mostYellowCards');
        $response->assertViewHas('mostRedCards');
        $response->assertViewHas('leastGoalsConceded');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('alliance.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('alliance.index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $alliance = \App\Models\Alliance::factory()->create();

        $response = $this->put(route('alliance.update', [$alliance]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('alliance.index'));

        // TODO: perform additional assertions
    }

    // test cases...
}
